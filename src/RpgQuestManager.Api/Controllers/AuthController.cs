using Microsoft.AspNetCore.Mvc;
using RpgQuestManager.Api.DTOs.Auth;
using RpgQuestManager.Api.Services;

namespace RpgQuestManager.Api.Controllers;

/// <summary>
/// Gerenciamento de autentica칞칚o e registro de usu치rios
/// </summary>
[ApiController]
[Route("api/v1/[controller]")]
[Produces("application/json")]
[ApiExplorerSettings(GroupName = "游댏 Autentica칞칚o")]
public class AuthController : ControllerBase
{
    private readonly IAuthService _authService;
    private readonly ILogger<AuthController> _logger;
    
    public AuthController(IAuthService authService, ILogger<AuthController> logger)
    {
        _authService = authService;
        _logger = logger;
    }
    
    /// <summary>
    /// Registra um novo usu치rio no sistema
    /// </summary>
    /// <param name="request">Dados de registro do usu치rio</param>
    /// <returns>Token JWT e informa칞칫es do usu치rio</returns>
    /// <remarks>
    /// Exemplo de requisi칞칚o:
    /// 
    ///     POST /api/v1/auth/register
    ///     {
    ///         "username": "herouser",
    ///         "email": "hero@eldoria.com",
    ///         "password": "senha123"
    ///     }
    ///     
    /// Regras de valida칞칚o:
    /// * Username: m칤nimo 3 caracteres, m치ximo 50
    /// * Email: formato v치lido
    /// * Password: m칤nimo 6 caracteres
    /// 
    /// </remarks>
    /// <response code="200">Usu치rio registrado com sucesso. Retorna token JWT.</response>
    /// <response code="400">Dados inv치lidos ou usu치rio/email j치 existe</response>
    [HttpPost("register")]
    [ProducesResponseType(typeof(AuthResponse), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public async Task<ActionResult<AuthResponse>> Register([FromBody] RegisterRequest request)
    {
        _logger.LogInformation("Tentativa de registro para usu치rio: {Username}", request.Username);
        var response = await _authService.RegisterAsync(request);
        return Ok(response);
    }
    
    /// <summary>
    /// Autentica um usu치rio existente e retorna token JWT
    /// </summary>
    /// <param name="request">Credenciais de login</param>
    /// <returns>Token JWT v치lido por 24 horas</returns>
    /// <remarks>
    /// Exemplo de requisi칞칚o:
    /// 
    ///     POST /api/v1/auth/login
    ///     {
    ///         "username": "herouser",
    ///         "password": "senha123"
    ///     }
    ///     
    /// O token retornado deve ser usado no header Authorization:
    /// 
    ///     Authorization: Bearer {seu_token_aqui}
    ///     
    /// </remarks>
    /// <response code="200">Login bem-sucedido. Retorna token JWT.</response>
    /// <response code="400">Credenciais inv치lidas</response>
    [HttpPost("login")]
    [ProducesResponseType(typeof(AuthResponse), StatusCodes.Status200OK)]
    [ProducesResponseType(StatusCodes.Status400BadRequest)]
    public async Task<ActionResult<AuthResponse>> Login([FromBody] LoginRequest request)
    {
        _logger.LogInformation("Tentativa de login para usu치rio: {Username}", request.Username);
        var response = await _authService.LoginAsync(request);
        return Ok(response);
    }
}

